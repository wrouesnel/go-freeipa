// Code generated by `github.com/tehwalris/go-freeipa/gen` - DO NOT EDIT.

package freeipa;

import (
  "time"
	"encoding/json"
  "encoding/base64"
  "fmt"
  "reflect"
  "strconv"
)

var apiVersion = "{{.Schema.Version}}"

type request struct {
  Method string `json:"method"`
  Params []interface{} `json:"params"`
}

// DNSName type alias to string so UnmarshalJSON can decode it properly.
// The string for this name is hardcoded in ./convert.go as well.
type DNSName string

func (out *DNSName) UnmarshalJSON(data []byte) error {
  var in interface{}
  if e := json.Unmarshal(data, &in); e != nil {
    return e
  }

  switch v := in.(type) {
    case string:
      *out = DNSName(v)
    case map[string]interface{}:
      var ok bool
      var tout string
      tout, ok = v["__dns_name__"].(string)
      if !ok {
        return fmt.Errorf("DNSName could not be unmarshalled from string type.")
      }
      *out = DNSName(tout)
  }

  return nil
}

{{range .Schema.Commands}}
/*
{{TrimSpace .Doc}}
*/
func (c *Client) {{.UpperName}}(
  {{range .PosParams -}}
    {{.LowerName}} {{ToGoType .Type}}, // {{.Doc}}
  {{end -}}
  reqArgs *{{.UpperName}}Args,
  optArgs *{{.UpperName}}OptionalArgs, // can be nil
) (*{{.UpperName}}Result, error) {
  if reqArgs == nil {
    return nil, fmt.Errorf("reqArgs cannot be nil")
  }
  kwp := {{.LowerName}}KwParams{
    {{.UpperName}}Args: reqArgs,
    {{.UpperName}}OptionalArgs: optArgs,
    Version: apiVersion,
  }
  req := request{
    Method: "{{.Name}}",
    Params: []interface{}{
      []interface{}{
        {{- range .PosParams}}{{.LowerName}}, {{end -}}
      }, &kwp},
  }
  readCloser, e := c.exec(&req)
  if e != nil {
    return nil, e
  }
  defer readCloser.Close()
  var res {{.LowerName}}Response
	if e := json.NewDecoder(readCloser).Decode(&res); e != nil {
		return nil, e
	}
	if res.Error != nil {
		return nil, res.Error
	}
  if res.Result == nil {
    return nil, fmt.Errorf("missing result in response")
  }
  return res.Result, nil
}

type {{.UpperName}}Args struct {
  {{range .KwParams}}
  {{- if .Required}}
    /*
{{.Label}}
{{.Doc}}
    */
    {{.UpperName}} {{if .Multivalue}}[]{{end}}{{ToGoType .Type}} `json:"{{.Name}},omitempty"`
  {{end -}}
  {{end -}}
}

type {{.UpperName}}OptionalArgs struct {
  {{range .KwParams}}
  {{- if not .Required}}
    /*
{{.Label}}
{{.Doc}}
    */
    {{.UpperName}} *{{if .Multivalue}}[]{{end}}{{ToGoType .Type}} `json:"{{.Name}},omitempty"`
  {{end -}}
  {{end -}}
}

type {{.LowerName}}KwParams struct {
  *{{.UpperName}}Args
  *{{.UpperName}}OptionalArgs

  /*
  Automatically set.
  Used by the server to determine whether to accept the request.
  */
  Version string `json:"version"`
}

type {{.LowerName}}Response struct {
	Error  *Error      `json:"error"`
	Result *{{.UpperName}}Result `json:"result"`
}

type {{.UpperName}}Result struct {
  {{$cmd := .}}
  {{range .Output}}
    /*
{{.Doc}}
    ({{if .Required}}required{{else}}optional{{end}})
    */
    {{.UpperName}} {{if not .Required}}*{{end}}{{if .Multivalue}}[]{{end}}{{.GoType $cmd}} `json:"{{.Name}},omitempty"`
  {{end -}}
}

func (t *{{.UpperName}}Result) String() string {
  if t == nil {
    return "<nil>"
  }
  b, e := json.Marshal(t)
  if e != nil {
    return fmt.Sprintf("{{.UpperName}}Result[failed json.Marshal: %v]", e)
  }
  return fmt.Sprintf("{{.UpperName}}Result%v", string(b))
}

{{end}}

{{range .Schema.Classes}}
type {{.UpperName}} struct {
  {{range .Params}}
    /*
{{.Label}}
{{.Doc}}
    */
    {{.UpperName}} {{if not .Required}}*{{end}}{{if .Multivalue}}[]{{end}}
    {{- ToGoType .Type}} `json:"{{.Name}},omitempty"`
  {{end -}}
}

func (t *{{.UpperName}}) String() string {
  if t == nil {
    return "<nil>"
  }
  b, e := json.Marshal(t)
  if e != nil {
    return fmt.Sprintf("{{.UpperName}}[failed json.Marshal: %v]", e)
  }
  return fmt.Sprintf("{{.UpperName}}%v", string(b))
}

type json{{.UpperName}} struct {
  {{range .Params}}
    {{.UpperName}} interface{} `json:"{{.Name}}"`
  {{end -}}
}

func (out *{{.UpperName}}) UnmarshalJSON(data []byte) error {
  var in json{{.UpperName}}
  if e := json.Unmarshal(data, &in); e != nil {
    return e
  }
  {{range .Params}}
  if {{if .Required}}true{{else}}in.{{.UpperName}} != nil{{end}} {
    raw := in.{{.UpperName}}
    {{if eq "DNSName" .Type}}
    plainOk := false
    var plainV DNSName
    switch tempV := raw.(type) {
      case string:
        plainV = DNSName(tempV)
      case map[string]interface{}:
        var tplainV string
        tplainV, plainOk = tempV["__dns_name__"].(string)
        plainV = DNSName(tplainV)
      default:
        break
    }
    {{else if eq "bytes" .Type}}
    plainOk := false
    var plainV []byte
    switch tempV := raw.(type) {
      case string:
        plainV, _ = base64.StdEncoding.DecodeString(tempV)
      case map[string]interface{}:
        var tplainV string
        tplainV, plainOk = tempV["__base64__"].(string)
        plainV, _ = base64.StdEncoding.DecodeString(tplainV)
      default:
        break
    }
    {{else if eq "bool" (ToGoType .Type)}}
    plainOk := false
    var plainV bool
    switch tempV := raw.(type) {
      case bool:
        plainV = tempV
        plainOk = true
      case string:
        var tempErr error
        plainV, tempErr = strconv.ParseBool(tempV)
        plainOk = tempErr == nil
      default:
        break
    }
    {{else}}
    plainV, plainOk := raw.({{ToGoType .Type}})
    {{end}}
    sliceWrapperV, sliceWrapperOk := raw.([]interface{})
    var sliceV []{{ToGoType .Type}}
    sliceOk := sliceWrapperOk
    if sliceWrapperOk {
      for _, rawItem := range sliceWrapperV {
        {{if eq "int" (ToGoType .Type)}}
        itemV, itemOk := rawItem.(string)
        {{else if eq "bool" (ToGoType .Type)}}
        itemOk := false
        var itemV bool
        switch tempV := rawItem.(type) {
          case bool:
            itemV = tempV
            itemOk = true
          case string:
            var tempErr error
            itemV, tempErr = strconv.ParseBool(tempV)
            itemOk = tempErr == nil
          default:
            break
        }
        {{else if eq "DNSName" .Type}}
        var itemV DNSName
        itemOk := false
        // Handle multiple implementations of the type
        switch tempItemV := rawItem.(type) {
          case string:
            itemV = DNSName(tempItemV)
            itemOk = true
          case map[string]interface{}:
            var titemV string
            titemV, itemOk = tempItemV["__dns_name__"].(string)
            itemV = DNSName(titemV)
          default:
            break
        }
        {{else if eq "bytes" .Type}}
        var itemV []byte
        itemOk := false
        // Handle multiple implementations of the type
        switch tempItemV := rawItem.(type) {
          case string:
            itemV, _ = base64.StdEncoding.DecodeString(tempItemV)
            itemOk = true
          case map[string]interface{}:
            var titemV string
            titemV, itemOk = tempItemV["__base64__"].(string)
            itemV, _ = base64.StdEncoding.DecodeString(titemV)
          default:
            break
        }
        {{else}}
        itemV, itemOk := rawItem.({{ToGoType .Type}})
        {{end}}
        if !itemOk {
          sliceOk = false
          break
        }
        {{if eq "int" (ToGoType .Type)}}
        intV, e := strconv.Atoi(itemV)
        if e != nil {
          return fmt.Errorf("unexpected value for field {{.UpperName}}: %v (hit string which couldn't be converted to int)", raw)
        }
        sliceV = append(sliceV, intV)
        {{else}}
        sliceV = append(sliceV, itemV)
        {{end}}
      }
    }
    {{if .Multivalue}}
    if plainOk {
      out.{{.UpperName}} = {{if not .Required}}&{{end}}[]{{ToGoType .Type}}{plainV}
    } else if sliceOk {
      {{if .Required}}
        if len(sliceV) < 1 {
          return fmt.Errorf("unexpected value for field {{.UpperName}}: %v; expected at least one element", raw)
        }
      {{end}}
      out.{{.UpperName}} = {{if not .Required}}&{{end}}sliceV
    } else {
      return fmt.Errorf("unexpected value for field {{.UpperName}}: %v (%v)", raw, reflect.TypeOf(raw))
    }
    {{else}}
    if plainOk {
      out.{{.UpperName}} = {{if not .Required}}&{{end}}plainV
    } else if sliceOk {
      {{if .Required}}
        if len(sliceV) != 1 {
          return fmt.Errorf("unexpected value for field {{.UpperName}}: %v; expected exactly one element", raw)
        }
        out.{{.UpperName}} = sliceV[0]
      {{else}}
        if len(sliceV) == 1 {
          out.{{.UpperName}} = &sliceV[0]
        } else if len(sliceV) > 1 {
          return fmt.Errorf("unexpected value for field {{.UpperName}}: %v; expected at most one element", raw)
        }
      {{end}}
    } else {
      return fmt.Errorf("unexpected value for field {{.UpperName}}: %v (%v)", raw, reflect.TypeOf(raw))
    }
    {{end}}
  }
  {{end -}}
  return nil
}
{{end}}

{{range .Errs}}
const {{.Name}}Code = {{.Errno}}
{{end}}